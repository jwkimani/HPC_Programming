__author__ = 'jkwanjooh'
import math
from pprint import pprint

processes = []
for process in range(10,330,10):
    processes.append(process)
cores = []
for core in range(0,8):
    cores.append(int(math.pow(2,core)))

#method to calculate runtime process for a Serial program
def calculateSerial(numProcess):
    return (numProcess * numProcess)

#method to calculate runtime  process for a Parallel program
def calculateParallel(numProcess, numCores):
    return (calculateSerial(numProcess) /(numCores + math.log(numCores, 2)))

#method to calculate speedup
def calculateSpeedup(numProcess, numCores):
    return calculateParallel(numProcess, numCores)/calculateSerial(numProcess)

#method to calculate Efficiency
def calculateEfficiency(numProcess, numCores):
    return calculateSpeedup(numProcess, numCores)/numCores

#method to print out the runtime for a serial program
def printSerialProgram():
    ser = []
    print()
    print("          Serial Program Runtime(n is the number of processes)")
    print("    --------------------------------------------------------------------------------------------------------"
      "------------------------------------------------------------------------------------------------------------"
      "------------------------------------------------------------------------------------------------------------"
      "--------------------------------------------------------------------------------------------------")
    print("{:<3} {:>1}".format('n', "|"), end = '')
    for process in processes:
        print('{:^13}'.format(process), end="")
    print()
    print("------------------------------------------------------------------------------------------------------------"
      "------------------------------------------------------------------------------------------------------------"
      "------------------------------------------------------------------------------------------------------------"
      "--------------------------------------------------------------------------------------------------")
    print("{:<3} {:>1}".format('n^2', "|"), end = '')
    for process in processes:
        print('{:^13}'.format(calculateSerial(process)), end="")
    print()
    print("------------------------------------------------------------------------------------------------------------"
      "------------------------------------------------------------------------------------------------------------"
      "------------------------------------------------------------------------------------------------------------"
      "--------------------------------------------------------------------------------------------------")

#method to print Runtime for a parallel program
def printParallelProgram():
    print("          Parallel Program Runtime(n is the number of processes and p is the number of cores) ")
    print("    --------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")
    print('{:>5}'.format('|'), end='')
    for process in processes:
        print('{:>13}'.format(process), end="")
    print()
    print("------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")

    for core in cores:
        print("{:<3} {:>1}".format(core, "|"), end = '')
        for process in processes:
            print('{:>13.2f}'.format(calculateParallel(process,core)), end = '')
        print()
        print("------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")

def printParallelProgramSpeedUp():
    print("          Speedup (n is the number of processes and p is the number of cores) ")
    print("    --------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")
    print('{:>5}'.format('|'), end='')
    for process in processes:
        print('{:>13}'.format(process), end="")
    print()
    print("------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")

    for core in cores:
        print("{:<3} {:>1}".format(core, "|"), end = '')
        for process in processes:
            print('{:>13.2f}'.format(calculateSpeedup(process,core)), end = '')
        print()
        print("------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")


def printParallelProgramEfficiency():
    print("          Efficiency (n is the number of processes and p is the number of cores) ")
    print("    --------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")
    print('{:>5}'.format('|'), end='')
    for process in processes:
        print('{:>13}'.format(process), end="")
    print()
    print("------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")

    for core in cores:
        print("{:<3} {:>1}".format(core, "|"), end = '')
        for process in processes:
            print('{:>13.2f}'.format(calculateEfficiency(process,core)), end = '')
        print()
        print("------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "------------------------------------------------------------------------------------------------------------"
        "--------------------------------------------------------------------------------------------------")
#print(calculateSerial(10))
#print('{:.2f}'.format(calculateParallel(10, 2)))

#printSerialProgram()
#printParallelProgram()
printParallelProgramSpeedUp()
printParallelProgramEfficiency()
